{"ast":null,"code":"var _jsxFileName = \"/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/addArticles.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddArticle() {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token'); // 로컬 스토리지에서 토큰 가져오기\n    console.log(token);\n    if (!token) {\n      console.error(\"토큰이 없습니다. 로그인이 필요합니다.\");\n      return;\n    }\n    const userInfo = parseJwt(token);\n    console.log(userInfo);\n    const article = {\n      title,\n      content\n    };\n    await fetch('/api/articles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 요청 헤더에 토큰 포함\n      },\n      body: JSON.stringify(article)\n    });\n    // Form 제출 후 필드 초기화\n    setTitle('');\n    setContent('');\n    // 추가적인 액션 (예: 게시글 목록 새로고침)\n  };\n  function parseJwt(token) {\n    // JWT 토큰의 페이로드 부분만 추출합니다.\n    const base64Url = token.split('.')[1];\n    // base64Url을 base64로 변환합니다.\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    // base64 인코딩된 문자열을 디코딩합니다.\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    // JSON 문자열을 객체로 변환합니다.\n    return JSON.parse(jsonPayload);\n  }\n  ;\n\n  // 사용 예시\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        placeholder: \"Title\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: content,\n        onChange: e => setContent(e.target.value),\n        placeholder: \"Content\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n}\n_s(AddArticle, \"OTvljkGZ3oDHjpEqZRGoAyVoe2c=\");\n_c = AddArticle;\nexport default AddArticle;\nvar _c;\n$RefreshReg$(_c, \"AddArticle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AddArticle","_s","title","setTitle","content","setContent","handleSubmit","e","preventDefault","token","localStorage","getItem","console","log","error","userInfo","parseJwt","article","fetch","method","headers","body","JSON","stringify","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","parse","children","onSubmit","type","value","onChange","target","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/addArticles.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction AddArticle() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const token = localStorage.getItem('token'); // 로컬 스토리지에서 토큰 가져오기\n  console.log(token);\n    if (!token) {\n      console.error(\"토큰이 없습니다. 로그인이 필요합니다.\");\n      return;\n    }\n    const userInfo = parseJwt(token);\n    console.log(userInfo);\n    const article = { title, content };\n    await fetch('/api/articles', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`, // 요청 헤더에 토큰 포함\n      },\n      body: JSON.stringify(article),\n    });\n    // Form 제출 후 필드 초기화\n    setTitle('');\n    setContent('');\n    // 추가적인 액션 (예: 게시글 목록 새로고침)\n\n  };\n\n  function parseJwt(token) {\n    // JWT 토큰의 페이로드 부분만 추출합니다.\n    const base64Url = token.split('.')[1];\n    // base64Url을 base64로 변환합니다.\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    // base64 인코딩된 문자열을 디코딩합니다.\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    // JSON 문자열을 객체로 변환합니다.\n    return JSON.parse(jsonPayload);\n  };\n\n\n// 사용 예시\n\n\n\n  return (\n      <div>\n      <form onSubmit={handleSubmit}>\n        <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            placeholder=\"Title\"\n            required\n        />\n        <textarea\n            value={content}\n            onChange={e => setContent(e.target.value)}\n            placeholder=\"Content\"\n            required\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      </div>\n  );\n}\n\nexport default AddArticle;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}