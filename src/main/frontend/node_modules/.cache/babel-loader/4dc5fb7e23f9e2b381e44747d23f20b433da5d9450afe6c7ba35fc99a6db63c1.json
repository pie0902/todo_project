{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate,useParams}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function ArticleDetail(){const{id:articleId}=useParams();const[article,setArticle]=useState(null);const[comments,setComments]=useState([]);const[newComment,setNewComment]=useState('');const navigate=useNavigate();const{id}=useParams();// URL 경로로부터 id 값을 추출\nuseEffect(()=>{fetchArticleAndComments();if(id===undefined){console.error(\"ID 값이 정의되지 않았습니다.\");// 필요한 처리 수행 (예: 에러 메시지 표시, 이전 페이지로 이동 등)\n}else{// 정상적인 로직 수행\n}},[id]);const fetchArticleAndComments=async()=>{// 게시글 상세 정보 가져오기\nfetchArticle();// 댓글 목록 가져오기\nfetchComments();};const fetchComments=async()=>{const token=localStorage.getItem('token');const response=await fetch(\"/api/articles/\".concat(id,\"/comments\"),{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){console.error(\"Failed to fetch comments.\");return;}const data=await response.json();setComments(data);};const handleNewCommentChange=e=>{setNewComment(e.target.value);};const fetchArticle=async()=>{// 로컬 스토리지에서 토큰을 가져옵니다.\nconst token=localStorage.getItem('token');// 요청 시 인증 토큰을 Authorization 헤더에 포함합니다.\nconst response=await fetch(\"/api/articles/\".concat(id),{headers:{'Authorization':\"Bearer \".concat(token)}},[id]);if(!response.ok){// 요청 실패 처리 (예: 에러 메시지 설정)\nconsole.error(\"Failed to fetch article details.\");return;}const data=await response.json();setArticle(data);};const submitComment=async()=>{const token=localStorage.getItem('token');const response=await fetch(\"/api/articles/\".concat(id,\"/comments\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify({content:newComment})});if(!response.ok){console.error(\"Failed to submit comment.\");return;}setNewComment('');fetchComments();// 댓글 목록 새로고침\n};const[isEditing,setIsEditing]=useState(false);const[editingCommentId,setEditingCommentId]=useState(null);const[updatedContent,setUpdatedContent]=useState('');const startEditComment=(commentId,currentContent)=>{setIsEditing(true);setEditingCommentId(commentId);setUpdatedContent(currentContent);// 현재 댓글 내용으로 초기화\n};//댓글 수정\nconst submitUpdatedComment=async()=>{const token=localStorage.getItem('token');try{console.log(\"Article ID: \".concat(articleId,\", Comment ID: \").concat(editingCommentId));const response=await fetch(\"/api/articles/\".concat(articleId,\"/comments/\").concat(editingCommentId),{// 수정: articleId와 editingCommentId 사용\nmethod:'PUT',headers:{'Authorization':\"Bearer \".concat(token),'Content-Type':'application/json'},body:JSON.stringify({content:updatedContent})});if(!response.ok){throw new Error('Failed to update comment.');}setIsEditing(false);setEditingCommentId(null);fetchComments();// 댓글 목록 새로고침\n}catch(error){console.error(error.message);}};if(!article)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});const handleArticleClick=articleId=>{navigate(\"/board/editArticles/\".concat(articleId));// 게시글 상세보기 페이지로 이동\n};const handleArticleClick2=articleId=>{navigate(\"/board/deleteArticles/\".concat(articleId));// 게시글 상세보기 페이지로 이동\n};const handleDelete=async commentId=>{// 사용자에게 삭제를 확인\nconst isConfirmed=window.confirm(\"댓글을 삭제하시겠습니까?\");if(isConfirmed){// 삭제 로직 실행\ntry{const token=localStorage.getItem('token');const response=await fetch(\"/api/articles/\".concat(articleId,\"/comments/\").concat(commentId),{method:'DELETE',headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){throw new Error('Failed to delete comment.');}// 성공적으로 삭제되었다면, 댓글 목록 새로고침\nfetchComments();}catch(error){console.error(error.message);// 에러 처리 로직 (예: 사용자에게 에러 메시지 표시)\n}}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"article-detail-page\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"\\uC791\\uC131\\uC790: \",article.username]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\uC81C\\uBAA9: \",article.title]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-box\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uAE00\\uB0B4\\uC6A9: \",article.content]})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleArticleClick(article.id),children:\"\\uAE00 \\uC218\\uC815\\uD558\\uAE30\"}),/*#__PURE__*/_jsx(\"button\",{className:\"deleteArticle\",onClick:()=>handleArticleClick2(article.id),children:\"x\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"comments-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"span\",{children:\"\\uB313\\uAE00\"})}),comments.map(comment=>/*#__PURE__*/_jsx(\"div\",{className:\"comment\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"comment-space\",children:[comment.username,\": \",comment.content,/*#__PURE__*/_jsx(\"button\",{className:\"comment-edit-btn\",onClick:()=>startEditComment(comment.id,comment.content),children:\"\\uC218\\uC815\"}),/*#__PURE__*/_jsx(\"button\",{className:\"comment-remove-btn\",onClick:()=>handleDelete(comment.id),children:\"x\"})]})},comment.id)),isEditing&&/*#__PURE__*/_jsxs(\"div\",{className:\"edit-comment-form\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:updatedContent,onChange:e=>setUpdatedContent(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>submitUpdatedComment(),children:\"\\uB313\\uAE00 \\uC218\\uC815\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsEditing(false),children:\"\\uCDE8\\uC18C\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"comment-form\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:newComment,onChange:handleNewCommentChange,placeholder:\"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:submitComment,children:\"\\uB313\\uAE00 \\uC791\\uC131\"})]})]});}export default ArticleDetail;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ArticleDetail","id","articleId","article","setArticle","comments","setComments","newComment","setNewComment","navigate","fetchArticleAndComments","undefined","console","error","fetchArticle","fetchComments","token","localStorage","getItem","response","fetch","concat","headers","ok","data","json","handleNewCommentChange","e","target","value","submitComment","method","body","JSON","stringify","content","isEditing","setIsEditing","editingCommentId","setEditingCommentId","updatedContent","setUpdatedContent","startEditComment","commentId","currentContent","submitUpdatedComment","log","Error","message","children","handleArticleClick","handleArticleClick2","handleDelete","isConfirmed","window","confirm","className","username","title","onClick","map","comment","onChange","placeholder"],"sources":["/Users/jongilyun/Desktop/Spring/todo_project/src/main/frontend/src/components/articleDetail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\n\nfunction ArticleDetail() {\n  const { id: articleId } = useParams();\n  const [article, setArticle] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const navigate = useNavigate();\n  const { id } = useParams(); // URL 경로로부터 id 값을 추출\n\n  useEffect(() => {\n\n    fetchArticleAndComments();\n    if (id === undefined) {\n      console.error(\"ID 값이 정의되지 않았습니다.\");\n      // 필요한 처리 수행 (예: 에러 메시지 표시, 이전 페이지로 이동 등)\n    } else {\n      // 정상적인 로직 수행\n    }\n  }, [id]);\n\n\n\n  const fetchArticleAndComments = async () => {\n    // 게시글 상세 정보 가져오기\n    fetchArticle();\n    // 댓글 목록 가져오기\n    fetchComments();\n  };\n\n\n  const fetchComments = async () => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`/api/articles/${id}/comments`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (!response.ok) {\n      console.error(\"Failed to fetch comments.\");\n      return;\n    }\n\n    const data = await response.json();\n    setComments(data);\n  };\n\n  const handleNewCommentChange = (e) => {\n    setNewComment(e.target.value);\n  };\n\n\n  const fetchArticle = async () => {\n    // 로컬 스토리지에서 토큰을 가져옵니다.\n    const token = localStorage.getItem('token');\n\n    // 요청 시 인증 토큰을 Authorization 헤더에 포함합니다.\n    const response = await fetch(`/api/articles/${id}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    },[id]);\n\n    if (!response.ok) {\n      // 요청 실패 처리 (예: 에러 메시지 설정)\n      console.error(\"Failed to fetch article details.\");\n      return;\n    }\n\n    const data = await response.json();\n    setArticle(data);\n  };\n\n\n\n  const submitComment = async () => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`/api/articles/${id}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({ content: newComment })\n    });\n\n    if (!response.ok) {\n      console.error(\"Failed to submit comment.\");\n      return;\n    }\n\n    setNewComment('');\n    fetchComments(); // 댓글 목록 새로고침\n  };\n\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [updatedContent, setUpdatedContent] = useState('');\n\n  const startEditComment = (commentId, currentContent) => {\n    setIsEditing(true);\n    setEditingCommentId(commentId);\n    setUpdatedContent(currentContent); // 현재 댓글 내용으로 초기화\n  };\n //댓글 수정\n  const submitUpdatedComment = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      console.log(`Article ID: ${articleId}, Comment ID: ${editingCommentId}`);\n      const response = await fetch(`/api/articles/${articleId}/comments/${editingCommentId}`, { // 수정: articleId와 editingCommentId 사용\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ content: updatedContent })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update comment.');\n      }\n\n      setIsEditing(false);\n      setEditingCommentId(null);\n      fetchComments(); // 댓글 목록 새로고침\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n\n\n  if (!article) return <div>Loading...</div>;\n\n\n\n  const handleArticleClick = (articleId) => {\n    navigate(`/board/editArticles/${articleId}`); // 게시글 상세보기 페이지로 이동\n  };\n  const handleArticleClick2 = (articleId) => {\n    navigate(`/board/deleteArticles/${articleId}`); // 게시글 상세보기 페이지로 이동\n  };\n\n\n  const handleDelete = async (commentId) => {\n    // 사용자에게 삭제를 확인\n    const isConfirmed = window.confirm(\"댓글을 삭제하시겠습니까?\");\n    if (isConfirmed) {\n      // 삭제 로직 실행\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`/api/articles/${articleId}/comments/${commentId}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to delete comment.');\n        }\n\n        // 성공적으로 삭제되었다면, 댓글 목록 새로고침\n        fetchComments();\n      } catch (error) {\n        console.error(error.message);\n        // 에러 처리 로직 (예: 사용자에게 에러 메시지 표시)\n      }\n    }\n  };\n\n  return (\n      <>\n      <div className=\"article-detail-page\">\n        <h4>작성자: {article.username}</h4>\n        <h3>제목: {article.title}</h3>\n        <div className=\"text-box\">\n          <p>글내용: {article.content}</p>\n        </div>\n        <button onClick={() => handleArticleClick(article.id)}>글 수정하기\n        </button>\n        <button className=\"deleteArticle\" onClick={() => handleArticleClick2(article.id)}>x\n        </button>\n      </div>\n\n  {/* 댓글 목록 표시 */}\n  <div className=\"comments-section\">\n    <h4><span>댓글</span></h4>\n    {comments.map((comment) => (\n        <div key={comment.id} className=\"comment\">\n          <p className=\"comment-space\">{comment.username}: {comment.content}\n            <button className=\"comment-edit-btn\"\n                    onClick={() => startEditComment(comment.id,\n                        comment.content)}>수정\n            </button>\n            <button className=\"comment-remove-btn\"\n                    onClick={() => handleDelete(comment.id)}>x\n            </button>\n          </p>\n\n        </div>\n    ))}\n    {/*// JSX에서 수정 폼 표시 (댓글 목록 렌더링 부분에 추가)*/}\n    {\n        isEditing && (\n            <div className=\"edit-comment-form\">\n              <textarea value={updatedContent} onChange={(e) => setUpdatedContent(e.target.value)} />\n              <button onClick={() => submitUpdatedComment()}>댓글 수정\n              </button>\n              <button onClick={() => setIsEditing(false)}>취소</button>\n            </div>\n        )\n    }\n\n\n  </div>\n\n  {/* 댓글 작성 폼 */}\n  <div className=\"comment-form\">\n    <textarea value={newComment} onChange={handleNewCommentChange} placeholder=\"댓글을 입력하세요...\" />\n    <button onClick={submitComment}>댓글 작성</button>\n  </div>\n  </>\n  );\n}\n\nexport default ArticleDetail;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}