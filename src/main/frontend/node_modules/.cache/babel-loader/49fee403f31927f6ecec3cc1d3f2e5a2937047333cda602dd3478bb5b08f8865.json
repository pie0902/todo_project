{"ast":null,"code":"var _jsxFileName = \"/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/test.js\";\nimport Login from \"./login\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token'); // 로컬 스토리지에서 토큰을 가져옵니다.\n\n    // 토큰이 없는 경우, 추가 로직을 실행하거나 오류 처리\n    if (!token) {\n      console.error(\"토큰이 없습니다. 로그인이 필요합니다.\");\n      return; // 혹은 사용자를 로그인 페이지로 리다이렉션\n    }\n    try {\n      const response = await fetch('/test', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // 헤더에 토큰을 추가합니다.\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log('테스트 성공:', data);\n        // 회원가입 성공 후 처리 (예: 로그인 페이지로 리다이렉트)\n      } else {\n        throw new Error(data.message || '회원가입 실패');\n      }\n    } catch (error) {\n      console.error('회원가입 에러:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleSubmit,\n    children: \"\\uD14C\\uC2A4\\uD2B8 \\uC694\\uCCAD \\uBCF4\\uB0B4\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["Login","jsxDEV","_jsxDEV","Test","handleSubmit","e","preventDefault","token","localStorage","getItem","console","error","response","fetch","method","headers","data","json","ok","log","Error","message","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/test.js"],"sourcesContent":["import Login from \"./login\";\n\nfunction Test() {\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      const token = localStorage.getItem('token'); // 로컬 스토리지에서 토큰을 가져옵니다.\n\n      // 토큰이 없는 경우, 추가 로직을 실행하거나 오류 처리\n      if (!token) {\n        console.error(\"토큰이 없습니다. 로그인이 필요합니다.\");\n        return; // 혹은 사용자를 로그인 페이지로 리다이렉션\n      }\n\n      try {\n        const response = await fetch('/test', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`, // 헤더에 토큰을 추가합니다.\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log('테스트 성공:', data);\n          // 회원가입 성공 후 처리 (예: 로그인 페이지로 리다이렉트)\n        } else {\n          throw new Error(data.message || '회원가입 실패');\n        }\n      } catch (error) {\n        console.error('회원가입 에러:', error);\n      }\n    };\n\n  return (\n      <button onClick={handleSubmit}>테스트 요청 보내기</button>\n  );\n}\nexport default Test;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,IAAIA,CAAA,EAAG;EACZ,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C;IACA,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACtC,OAAO,CAAC;IACV;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,OAAO,EAAE;QACpCC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAG,UAASR,KAAM,EAAC;UAAE;UACpC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACfR,OAAO,CAACS,GAAG,CAAC,SAAS,EAAEH,IAAI,CAAC;QAC5B;MACF,CAAC,MAAM;QACL,MAAM,IAAII,KAAK,CAACJ,IAAI,CAACK,OAAO,IAAI,SAAS,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC;EACF,CAAC;EAEH,oBACIT,OAAA;IAAQoB,OAAO,EAAElB,YAAa;IAAAmB,QAAA,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAExD;AAACC,EAAA,GAlCQzB,IAAI;AAmCb,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}