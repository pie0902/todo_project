{"ast":null,"code":"var _jsxFileName = \"/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../css/login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // 로그인 요청 보내는 부분\n    } catch (error) {\n      console.error('로그인 에러:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        // 사용자 정보 가져오는 요청 보내는 부분\n      } catch (error) {\n        console.error('API 에러:', error);\n      }\n    };\n    fetchUserData(); // 컴포넌트가 마운트된 후에 호출됩니다.\n  }, []); // 빈 배열을 넣어 한 번만 실행되도록 합니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}\n_s(Login, \"Azh4nDFCECfuvkgNaiGV+xdRyGQ=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Login","_s","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","error","console","fetchUserData","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jongilyun/Desktop/Spring/todo_veiw/src/components/login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../css/login.css';\n\nfunction Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // 로그인 요청 보내는 부분\n    } catch (error) {\n      console.error('로그인 에러:', error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        // 사용자 정보 가져오는 요청 보내는 부분\n      } catch (error) {\n        console.error('API 에러:', error);\n      }\n    };\n\n    fetchUserData(); // 컴포넌트가 마운트된 후에 호출됩니다.\n  }, []); // 빈 배열을 넣어 한 번만 실행되도록 합니다.\n\n  return (\n      <div className=\"login-container\">\n        {/* 로그인 폼 */}\n      </div>\n  );\n}\n\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;IAAA,CACD,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;MAAA,CACD,CAAC,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF,CAAC;IAEDE,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIZ,OAAA;IAAKa,SAAS,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE3B,CAAC;AAEZ;AAACf,EAAA,CA9BQD,KAAK;AAAAiB,EAAA,GAALjB,KAAK;AAgCd,eAAeA,KAAK;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}